require("dotenv").config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");

const bot = new Bot(process.env.BOT_API_KEY);

bot.use(hydrate());

// bot.on("message:voice", async (stx) => {
//   await stx.reply("–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ");
// });

// bot.on("message:entities:url", async (stx) => {
//   await stx.reply("—Å—Å—ã–ª–∫–∞");
// });

// bot.on([":media", "::url"], async (stx) => {
//   await stx.reply("—Å—Å—ã–ª–∫–∞");
// });

// bot.on(":photo").on("::hashtag", async () => {
//   console.log("yes");
// });

// bot.on("msg").filter(
//   (ctx) => {
//     // boolean
//     console.log("ctx", ctx.from);
//     return ctx.from.id === 7042949220;
//   },
//   async (ctx) => {
//     await ctx.reply("–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω");
//   }
// );

bot.api.setMyCommands([
  {
    command: "start",
    description: "–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞",
  },
  {
    command: "menu",
    description: "–ú–µ–Ω—é",
  },
]);

// bot.api.setMyCommands([
//   {
//     command: "start",
//     description: "–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞",
//   },
//   {
//     command: "mood",
//     description: "–û—Ü–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
//   },
//   {
//     command: "share",
//     description: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏",
//   },
//   {
//     command: "inline_keyboard",
//     description: "–∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∞",
//   },
// ]);

bot.command("start", async (stx) => {
  await stx.reply("–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç", {
    reply_parameters: { message_id: stx.msg.message_id },
  });
});

const menuKeyboard = new InlineKeyboard()
  .text("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "order-status")
  .text("–ó–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞", "support");
const backKeyboard = new InlineKeyboard().text("< –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async (ctx) => {
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
});
// editText –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ hydrate
bot.callbackQuery("order-status", async (ctx) => {
  await ctx.callbackQuery.message.editText("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –≤ –ø—É—Ç–∏", {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("support", async (ctx) => {
  // await ctx.callbackQuery.message.editText("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å", {
  //   reply_markup: backKeyboard,
  // });
  await ctx.api.editMessageText(
    ctx.chat.id,
    ctx.update.callback_query.message.message_id,
    "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å",
    {
      reply_markup: backKeyboard,
    }
  );
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("back", async (ctx) => {
  await ctx.callbackQuery.message.editText("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
  await ctx.answerCallbackQuery();
});

// bot.command("start", async (stx) => {
//   await stx.react("üëç");
//   await stx.reply(
//     `–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç <a href="https://tsg-go.info">tsg-go.info</a>`,
//     {
//       parse_mode: "HTML",
//     }
//   );
// });

// bot.command("start", async (stx) => {
//   await stx.react("üëç");
//   await stx.reply(
//     `–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç <a href="https://tsg-go.info">tsg-go.info</a>`,
//     {
//       parse_mode: "HTML",
//     }
//   );
// });

// bot.command("mood", async (ctx) => {
//   const moodKeyboard = new Keyboard()
//     .text("–•–æ—Ä–æ—à–æ")
//     .row()
//     .text("–ù–æ—Ä–º–∞–ª—å–Ω–æ")
//     .row()
//     .text("–ü–ª–æ—Ö–æ")
//     .row()
//     .resized()
//     .oneTime();
//   await ctx.reply("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", { reply_markup: moodKeyboard });
// });

// bot.command("share", async (ctx) => {
//   const shareKeyboard = new Keyboard()
//     .requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
//     .requestContact("–ö–æ–Ω—Ç–∞–∫—Ç")
//     .requestPoll("–û–ø—Ä–æ—Å")
//     .placeholder("–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ...")
//     .resized();
//   await ctx.reply("–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?", {
//     reply_markup: shareKeyboard,
//   });
// });

// bot.command("inline_keyboard", async (ctx) => {
//   // const inlineKeyboard = new InlineKeyboard()
//   //   .text("1", "button-1")
//   //   .text("2", "button-2")
//   //   .text("3", "button-3");

//   const inlineKeyboard2 = new InlineKeyboard().text(
//     "–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ª",
//     "https://https://t.me/+SJo5sN0kMGVhMjli"
//   );
//   await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É", {
//     reply_markup: inlineKeyboard,
//   });
// });

// —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏ –≤ callbackQuery –∏ hears
// bot.callbackQuery(/button-[1-3]/, async (ctx) => {
//   await ctx.answerCallbackQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É");
//   await ctx.reply(`–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ${ctx.callbackQuery.data}`);
// });

// bot.on("callback_query:data", async (ctx) => {
//   await ctx.answerCallbackQuery();
//   await ctx.reply(`–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ${ctx.callbackQuery.data}`);
// });

// bot.on(":contact", async (ctx) => {
//   await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç");
// });
// bot.hears(/–ø–∏–ø–µ—Ü/, async (ctx) => {
//   await ctx.reply("–†—É–≥–∞–µ–º—Å—è?");
// });

// bot.hears("–•–æ—Ä–æ—à–æ", async (ctx) => {
//   await ctx.reply("–ö–ª–∞—Å—Å", {
//     reply_markup: { remove_keyboard: true },
//   });
// });

bot.catch((err) => {
  const stx = err.stx;
  console.log("stx", stx);
  console.log(`Error while handing ${stx.update.update_id}`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.log("Grammy error", e.description);
  } else if (e instanceof HttpError) {
    console.log("Telegram error", e);
  } else {
    console.log("Unknow error", e);
  }
});

bot.start();
